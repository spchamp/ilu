package org.omg.CORBA.portable;


/** The Delegate abstract class specifies a portable API for
 *  ORB-vendor-specific implementation of the org.omg.CORBA.Object methods.
 *  Each stub (proxy) contains a delegate
 *  object, to which all org.omg.CORBA.Object methods are forwarded.
 *  This allows a stub generated by one vendor's ORB to work with the delegate
 *  from another vendor's ORB.
 *
 *  @see org.omg.CORBA.Object
 */

public abstract class Delegate {

    /** Return an InterfaceDef for the object reference provided.
     *  @param obj The object reference whose InterfaceDef needs to be returned
     *  @return the InterfaceDef
     */
    public org.omg.CORBA.Object get_interface_def(org.omg.CORBA.Object self)
    {
	throw new org.omg.CORBA.NO_IMPLEMENT();
    }

    /** Returns a duplicate of the object reference provided.
     *  @param obj The object reference whose duplicate needs to be returned
     *  @return the duplicate object reference
     */
    public /*abstract*/ org.omg.CORBA.Object duplicate(org.omg.CORBA.Object obj) {
        return obj; 
    }

    /** Releases resources associated with the object reference provided.
     *  @param obj The object reference whose resources need to be released
     */
    public /*abstract*/ void release(org.omg.CORBA.Object obj) {
    }

    /**
     *  Check if the object reference is an instance of the given interface.
     *  @param obj The object reference to be checked.
     *  @param repository_id The repository identifier of the interface 
	 *  to check against.
     *  @return true if the object reference supports the interface
     */
    public  /*abstract*/ boolean is_a(org.omg.CORBA.Object obj, String repository_id) {
        return false;
    }

    /**
     *  Determines whether the server object for the object reference has been
     *  destroyed.
     *  @param obj The object reference which delegated to this delegate.
     *  @result true if the ORB knows authoritatively that the server object does
     *         not exist, false otherwise
     */
    public /*abstract*/ boolean non_existent(org.omg.CORBA.Object obj) {
        return false;
    }

    /** Determines if the two object references are equivalent.
     *  @param obj The object reference which delegated to this delegate.
     *  @param other The object reference to check equivalence against.
     */
    public /*abstract*/ boolean is_equivalent(org.omg.CORBA.Object obj,
      					org.omg.CORBA.Object other) {
      return (obj==other);
      }

    /**
     * Returns an ORB-internal identifier (hashcode) for this object reference.
     * @param obj The object reference which delegated to this delegate.
     * @param maximum specifies an upper bound on the hash value returned by
     *            the ORB.
     * @return ORB-internal hash identifier for object reference
     */
    public /*abstract*/  int hash(org.omg.CORBA.Object obj, int max) {
        return 0;
    }


    /**
     * Return the ORB that created this delegate.
	 * @see <a href="package-summary.html#unimpl"><code>portable</code>
	 * package comments for unimplemented features</a>
     */
    public org.omg.CORBA.ORB orb(org.omg.CORBA.Object obj) {
        throw new org.omg.CORBA.NO_IMPLEMENT();
    }


    /**
     * Returns true if this object is implemented by a local servant. 
     *
     * @param self The object reference which delegated to this delegate.
     * @return true only if the servant incarnating this object is located in 
     * this Java VM. Return false if the servant is not local or the ORB 
     * does not support local stubs for this particular servant. The default 
     * behavior of is_local() is to return false.
     */
    public boolean is_local(org.omg.CORBA.Object self) {
        return false;
    }

    public String toString(org.omg.CORBA.Object self) {
        return self.getClass().getName() + ":" + this.toString();
    }

    public int hashCode(org.omg.CORBA.Object self) {
        return System.identityHashCode(self);
    }

    public boolean equals(org.omg.CORBA.Object self, java.lang.Object obj) {
        return (self == obj);
    }
}
