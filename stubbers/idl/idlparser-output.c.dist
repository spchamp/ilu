char *error_message[]={
"",
"pragma  ->  PRAGMA_ID .",
"pragma  ->  PRAGMA_VERSION .",
"pragma  ->  PRAGMA_PREFIX .",
"const_dcl  ->  CONST . const_type IDENT '=' const_expr",
"enum_type  ->  ENUM . IDENT '{' enumerator_list '}'",
"except_dcl  ->  EXCEPTION . IDENT '{' opt_member_list '}'",
"module  ->  MODULE . IDENT '{' definition_list '}'",
"type_dcl  ->  NATIVE . simple_declarator",
"struct_type  ->  STRUCT . IDENT '{' member_list '}'",
"type_dcl  ->  TYPEDEF . type_declarator",
"union_type  ->  UNION . IDENT SWITCH '(' switch_type_spec ')' '{' switch_body '}'",
"opt_abstract  ->  ABSTRACT .\nvalue_forward_dcl  ->  ABSTRACT . VALUETYPE IDENT\nvalue_abs_dcl  ->  ABSTRACT . VALUETYPE IDENT opt_value_inheritance_spec '{' interface_body '}'",
"value_header  ->  CUSTOM . VALUETYPE IDENT opt_value_inheritance_spec",
"value_forward_dcl  ->  VALUETYPE . IDENT\nvalue_box_dcl  ->  VALUETYPE . IDENT type_spec\nvalue_header  ->  VALUETYPE . IDENT opt_value_inheritance_spec",
"definition_list  ->  definition .",
"definition  ->  module . ';'",
"specification  ->  definition_list .\ndefinition_list  ->  definition_list . definition",
"definition  ->  interface . ';'",
"interface  ->  interface_dcl .",
"interface  ->  forward_dcl .",
"forward_dcl  ->  opt_abstract . INTERFACE IDENT\ninterface_header  ->  opt_abstract . INTERFACE IDENT\ninterface_header  ->  opt_abstract . INTERFACE IDENT ':' scoped_name_list",
"interface_dcl  ->  interface_header . '{' interface_body '}'",
"definition  ->  value . ';'",
"value  ->  value_forward_dcl .",
"value  ->  value_box_dcl .",
"value  ->  value_abs_dcl .",
"value  ->  value_dcl .",
"value_dcl  ->  value_header . '{' value_element_list '}'",
"definition  ->  const_dcl . ';'",
"definition  ->  type_dcl . ';'",
"type_dcl  ->  struct_type .",
"type_dcl  ->  union_type .",
"type_dcl  ->  enum_type .",
"definition  ->  except_dcl . ';'",
"definition  ->  pragma .",
"scoped_name  ->  IDENT .",
"boolean_type  ->  BOOLEAN_T .",
"char_type  ->  CHAR_T .",
"floating_pt_type  ->  DOUBLE_T .",
"fixed_pt_const_type  ->  FIXED .",
"floating_pt_type  ->  FLOAT_T .",
"signed_long_long_int  ->  LONG_T . LONG_T\nsigned_long_int  ->  LONG_T .",
"octet_type  ->  OCTET_T .",
"scoped_name  ->  SCOPE . IDENT",
"signed_short_int  ->  SHORT_T .",
"string_type  ->  STRING_T . '<' positive_const_int '>'\nstring_type  ->  STRING_T .",
"unsigned_long_long_int  ->  UNSIGNED_T . LONG_T LONG_T\nunsigned_long_int  ->  UNSIGNED_T . LONG_T\nunsigned_short_int  ->  UNSIGNED_T . SHORT_T",
"wide_char_type  ->  WCHAR_T .",
"wide_string_type  ->  WSTRING_T . '<' positive_const_int '>'\nwide_string_type  ->  WSTRING_T .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nconst_type  ->  scoped_name .",
"const_dcl  ->  CONST const_type . IDENT '=' const_expr",
"const_type  ->  floating_pt_type .",
"const_type  ->  integer_type .",
"integer_type  ->  signed_int .",
"signed_int  ->  signed_long_long_int .",
"signed_int  ->  signed_long_int .",
"signed_int  ->  signed_short_int .",
"integer_type  ->  unsigned_int .",
"unsigned_int  ->  unsigned_long_long_int .",
"unsigned_int  ->  unsigned_long_int .",
"unsigned_int  ->  unsigned_short_int .",
"const_type  ->  char_type .",
"const_type  ->  wide_char_type .",
"const_type  ->  boolean_type .",
"const_type  ->  octet_type .",
"const_type  ->  string_type .",
"const_type  ->  wide_string_type .",
"const_type  ->  fixed_pt_const_type .",
"enum_type  ->  ENUM IDENT . '{' enumerator_list '}'",
"except_dcl  ->  EXCEPTION IDENT . '{' opt_member_list '}'",
"module  ->  MODULE IDENT . '{' definition_list '}'",
"simple_declarator  ->  IDENT .",
"type_dcl  ->  NATIVE simple_declarator .",
"struct_type  ->  STRUCT IDENT . '{' member_list '}'",
"any_type  ->  ANY_T .",
"fixed_pt_type  ->  FIXED . '<' positive_const_int ',' positive_const_int '>'",
"object_type  ->  OBJECT_T .",
"sequence_type  ->  SEQUENCE . '<' simple_type_spec ',' positive_const_int '>'\nsequence_type  ->  SEQUENCE . '<' simple_type_spec '>'",
"value_base_type  ->  VALUEBASE .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nsimple_type_spec  ->  scoped_name .",
"type_dcl  ->  TYPEDEF type_declarator .",
"type_declarator  ->  type_spec . declarators",
"type_spec  ->  simple_type_spec .",
"simple_type_spec  ->  base_type_spec .",
"simple_type_spec  ->  template_type_spec .",
"type_spec  ->  constr_type_spec .",
"base_type_spec  ->  floating_pt_type .",
"base_type_spec  ->  integer_type .",
"base_type_spec  ->  char_type .",
"base_type_spec  ->  wide_char_type .",
"base_type_spec  ->  boolean_type .",
"base_type_spec  ->  octet_type .",
"base_type_spec  ->  any_type .",
"base_type_spec  ->  object_type .",
"base_type_spec  ->  value_base_type .",
"constr_type_spec  ->  struct_type .",
"constr_type_spec  ->  union_type .",
"constr_type_spec  ->  enum_type .",
"template_type_spec  ->  sequence_type .",
"template_type_spec  ->  string_type .",
"template_type_spec  ->  wide_string_type .",
"template_type_spec  ->  fixed_pt_type .",
"union_type  ->  UNION IDENT . SWITCH '(' switch_type_spec ')' '{' switch_body '}'",
"value_forward_dcl  ->  ABSTRACT VALUETYPE . IDENT\nvalue_abs_dcl  ->  ABSTRACT VALUETYPE . IDENT opt_value_inheritance_spec '{' interface_body '}'",
"value_header  ->  CUSTOM VALUETYPE . IDENT opt_value_inheritance_spec",
"value_forward_dcl  ->  VALUETYPE IDENT .\nvalue_box_dcl  ->  VALUETYPE IDENT . type_spec\nvalue_header  ->  VALUETYPE IDENT . opt_value_inheritance_spec",
"definition  ->  module ';' .",
"definition_list  ->  definition_list definition .",
"definition  ->  interface ';' .",
"forward_dcl  ->  opt_abstract INTERFACE . IDENT\ninterface_header  ->  opt_abstract INTERFACE . IDENT\ninterface_header  ->  opt_abstract INTERFACE . IDENT ':' scoped_name_list",
"interface_dcl  ->  interface_header '{' . interface_body '}'",
"definition  ->  value ';' .",
"value_dcl  ->  value_header '{' . value_element_list '}'",
"definition  ->  const_dcl ';' .",
"definition  ->  type_dcl ';' .",
"definition  ->  except_dcl ';' .",
"signed_long_long_int  ->  LONG_T LONG_T .",
"scoped_name  ->  SCOPE IDENT .",
"string_type  ->  STRING_T '<' . positive_const_int '>'",
"unsigned_long_long_int  ->  UNSIGNED_T LONG_T . LONG_T\nunsigned_long_int  ->  UNSIGNED_T LONG_T .",
"unsigned_short_int  ->  UNSIGNED_T SHORT_T .",
"wide_string_type  ->  WSTRING_T '<' . positive_const_int '>'",
"scoped_name  ->  scoped_name SCOPE . IDENT",
"const_dcl  ->  CONST const_type IDENT . '=' const_expr",
"enum_type  ->  ENUM IDENT '{' . enumerator_list '}'",
"except_dcl  ->  EXCEPTION IDENT '{' . opt_member_list '}'",
"module  ->  MODULE IDENT '{' . definition_list '}'",
"struct_type  ->  STRUCT IDENT '{' . member_list '}'",
"fixed_pt_type  ->  FIXED '<' . positive_const_int ',' positive_const_int '>'",
"sequence_type  ->  SEQUENCE '<' . simple_type_spec ',' positive_const_int '>'\nsequence_type  ->  SEQUENCE '<' . simple_type_spec '>'",
"simple_declarator  ->  IDENT .\narray_declarator  ->  IDENT . fixed_array_size",
"type_declarator  ->  type_spec declarators .\ndeclarators  ->  declarators . ',' declarator",
"declarators  ->  declarator .",
"declarator  ->  simple_declarator .",
"declarator  ->  complex_declarator .",
"complex_declarator  ->  array_declarator .\narray_declarator  ->  array_declarator . fixed_array_size",
"union_type  ->  UNION IDENT SWITCH . '(' switch_type_spec ')' '{' switch_body '}'",
"value_forward_dcl  ->  ABSTRACT VALUETYPE IDENT .\nvalue_abs_dcl  ->  ABSTRACT VALUETYPE IDENT . opt_value_inheritance_spec '{' interface_body '}'",
"value_header  ->  CUSTOM VALUETYPE IDENT . opt_value_inheritance_spec",
"opt_value_inheritance_base  ->  ':' . opt_truncatable scoped_name_list",
"value_header  ->  VALUETYPE IDENT opt_value_inheritance_spec .",
"opt_value_inheritance_spec  ->  opt_value_inheritance_base .\nopt_value_inheritance_spec  ->  opt_value_inheritance_base . SUPPORTS scoped_name_list",
"value_box_dcl  ->  VALUETYPE IDENT type_spec .",
"forward_dcl  ->  opt_abstract INTERFACE IDENT .\ninterface_header  ->  opt_abstract INTERFACE IDENT .\ninterface_header  ->  opt_abstract INTERFACE IDENT . ':' scoped_name_list",
"opt_op_attr  ->  ONEWAY .",
"opt_readonly  ->  READONLY .",
"interface_dcl  ->  interface_header '{' interface_body . '}'",
"export_list  ->  export .",
"interface_body  ->  export_list .\nexport_list  ->  export_list . export",
"export  ->  const_dcl . ';'",
"export  ->  type_dcl . ';'",
"export  ->  attr_dcl . ';'\nattr_dcl  ->  attr_dcl . ',' simple_declarator",
"attr_dcl  ->  opt_readonly . ATTRIBUTE param_type_spec simple_declarator",
"export  ->  except_dcl . ';'",
"export  ->  op_dcl . ';'",
"op_dcl  ->  opt_op_attr . op_type_spec IDENT parameter_dcls opt_raises_expr opt_context_expr",
"value_dcl  ->  value_header '{' value_element_list . '}'\nvalue_element_list  ->  value_element_list . value_element",
"boolean_literal  ->  BOOL_FALSE .",
"boolean_literal  ->  BOOL_TRUE .",
"literal  ->  CHAR_L .",
"literal  ->  FLOAT_L .",
"literal  ->  INTEGER_L .",
"string_literal  ->  STRING_L .",
"literal  ->  FIXED_PT_L .",
"primary_expr  ->  '(' . const_expr ')'",
"unary_operator  ->  '+' .",
"unary_operator  ->  '-' .",
"unary_operator  ->  '~' .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nprimary_expr  ->  scoped_name .",
"positive_const_int  ->  const_expr .",
"const_expr  ->  or_expr .\nor_expr  ->  or_expr . '|' xor_expr",
"or_expr  ->  xor_expr .\nxor_expr  ->  xor_expr . '^' and_expr",
"xor_expr  ->  and_expr .\nand_expr  ->  and_expr . '&' shift_expr",
"and_expr  ->  shift_expr .\nshift_expr  ->  shift_expr . LSHIFT add_expr\nshift_expr  ->  shift_expr . RSHIFT add_expr",
"shift_expr  ->  add_expr .\nadd_expr  ->  add_expr . '+' mult_expr\nadd_expr  ->  add_expr . '-' mult_expr",
"add_expr  ->  mult_expr .\nmult_expr  ->  mult_expr . '*' unary_expr\nmult_expr  ->  mult_expr . '/' unary_expr\nmult_expr  ->  mult_expr . '%' unary_expr",
"mult_expr  ->  unary_expr .",
"unary_expr  ->  unary_operator . primary_expr",
"unary_expr  ->  primary_expr .",
"primary_expr  ->  literal .",
"literal  ->  boolean_literal .",
"string_type  ->  STRING_T '<' positive_const_int . '>'",
"literal  ->  string_literal .\nstring_literal  ->  string_literal . STRING_L",
"unsigned_long_long_int  ->  UNSIGNED_T LONG_T LONG_T .",
"wide_string_type  ->  WSTRING_T '<' positive_const_int . '>'",
"scoped_name  ->  scoped_name SCOPE IDENT .",
"const_dcl  ->  CONST const_type IDENT '=' . const_expr",
"enumerator  ->  IDENT .",
"enum_type  ->  ENUM IDENT '{' enumerator_list . '}'\nenumerator_list  ->  enumerator_list . ',' enumerator",
"enumerator_list  ->  enumerator .",
"member  ->  type_spec . declarators ';'",
"member_list  ->  member_list . member\nopt_member_list  ->  member_list .",
"member_list  ->  member .",
"except_dcl  ->  EXCEPTION IDENT '{' opt_member_list . '}'",
"module  ->  MODULE IDENT '{' definition_list . '}'\ndefinition_list  ->  definition_list . definition",
"struct_type  ->  STRUCT IDENT '{' member_list . '}'\nmember_list  ->  member_list . member",
"fixed_pt_type  ->  FIXED '<' positive_const_int . ',' positive_const_int '>'",
"sequence_type  ->  SEQUENCE '<' simple_type_spec . ',' positive_const_int '>'\nsequence_type  ->  SEQUENCE '<' simple_type_spec . '>'",
"fixed_array_size  ->  '[' . positive_const_int ']'",
"array_declarator  ->  IDENT fixed_array_size .",
"declarators  ->  declarators ',' . declarator",
"array_declarator  ->  array_declarator fixed_array_size .",
"union_type  ->  UNION IDENT SWITCH '(' . switch_type_spec ')' '{' switch_body '}'",
"value_abs_dcl  ->  ABSTRACT VALUETYPE IDENT opt_value_inheritance_spec . '{' interface_body '}'",
"value_header  ->  CUSTOM VALUETYPE IDENT opt_value_inheritance_spec .",
"opt_truncatable  ->  TRUNCATABLE .",
"opt_value_inheritance_base  ->  ':' opt_truncatable . scoped_name_list",
"opt_value_inheritance_spec  ->  opt_value_inheritance_base SUPPORTS . scoped_name_list",
"interface_header  ->  opt_abstract INTERFACE IDENT ':' . scoped_name_list",
"interface_dcl  ->  interface_header '{' interface_body '}' .",
"export_list  ->  export_list export .",
"export  ->  const_dcl ';' .",
"export  ->  type_dcl ';' .",
"export  ->  attr_dcl ';' .",
"attr_dcl  ->  attr_dcl ',' . simple_declarator",
"attr_dcl  ->  opt_readonly ATTRIBUTE . param_type_spec simple_declarator",
"export  ->  except_dcl ';' .",
"export  ->  op_dcl ';' .",
"op_type_spec  ->  VOID_T .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nparam_type_spec  ->  scoped_name .",
"param_type_spec  ->  base_type_spec .",
"param_type_spec  ->  string_type .",
"param_type_spec  ->  wide_string_type .",
"op_dcl  ->  opt_op_attr op_type_spec . IDENT parameter_dcls opt_raises_expr opt_context_expr",
"op_type_spec  ->  param_type_spec .",
"param_type_spec  ->  fixed_pt_type .",
"init_dcl  ->  FACTORY . IDENT '(' opt_init_param_dcl_list ')' ';'",
"private_public  ->  PRIVATE .",
"private_public  ->  PUBLIC .",
"value_dcl  ->  value_header '{' value_element_list '}' .",
"value_element  ->  export .",
"value_element_list  ->  value_element_list value_element .",
"value_element  ->  state_member .",
"state_member  ->  private_public . type_spec declarators ';'",
"value_element  ->  init_dcl .",
"primary_expr  ->  '(' const_expr . ')'",
"or_expr  ->  or_expr '|' . xor_expr",
"xor_expr  ->  xor_expr '^' . and_expr",
"and_expr  ->  and_expr '&' . shift_expr",
"shift_expr  ->  shift_expr LSHIFT . add_expr",
"shift_expr  ->  shift_expr RSHIFT . add_expr",
"add_expr  ->  add_expr '+' . mult_expr",
"add_expr  ->  add_expr '-' . mult_expr",
"mult_expr  ->  mult_expr '*' . unary_expr",
"mult_expr  ->  mult_expr '/' . unary_expr",
"mult_expr  ->  mult_expr '%' . unary_expr",
"unary_expr  ->  unary_operator primary_expr .",
"string_type  ->  STRING_T '<' positive_const_int '>' .",
"string_literal  ->  string_literal STRING_L .",
"wide_string_type  ->  WSTRING_T '<' positive_const_int '>' .",
"const_dcl  ->  CONST const_type IDENT '=' const_expr .",
"enum_type  ->  ENUM IDENT '{' enumerator_list '}' .",
"enumerator_list  ->  enumerator_list ',' . enumerator",
"declarators  ->  declarators . ',' declarator\nmember  ->  type_spec declarators . ';'",
"member_list  ->  member_list member .",
"except_dcl  ->  EXCEPTION IDENT '{' opt_member_list '}' .",
"module  ->  MODULE IDENT '{' definition_list '}' .",
"struct_type  ->  STRUCT IDENT '{' member_list '}' .",
"fixed_pt_type  ->  FIXED '<' positive_const_int ',' . positive_const_int '>'",
"sequence_type  ->  SEQUENCE '<' simple_type_spec ',' . positive_const_int '>'",
"sequence_type  ->  SEQUENCE '<' simple_type_spec '>' .",
"fixed_array_size  ->  '[' positive_const_int . ']'",
"declarators  ->  declarators ',' declarator .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nswitch_type_spec  ->  scoped_name .",
"switch_type_spec  ->  integer_type .",
"switch_type_spec  ->  char_type .",
"switch_type_spec  ->  wide_char_type .",
"switch_type_spec  ->  boolean_type .",
"switch_type_spec  ->  octet_type .",
"union_type  ->  UNION IDENT SWITCH '(' switch_type_spec . ')' '{' switch_body '}'",
"switch_type_spec  ->  enum_type .",
"value_abs_dcl  ->  ABSTRACT VALUETYPE IDENT opt_value_inheritance_spec '{' . interface_body '}'",
"scoped_name  ->  scoped_name . SCOPE IDENT\nscoped_name_list  ->  scoped_name .",
"scoped_name_list  ->  scoped_name_list . ',' scoped_name\nopt_value_inheritance_base  ->  ':' opt_truncatable scoped_name_list .",
"scoped_name_list  ->  scoped_name_list . ',' scoped_name\nopt_value_inheritance_spec  ->  opt_value_inheritance_base SUPPORTS scoped_name_list .",
"interface_header  ->  opt_abstract INTERFACE IDENT ':' scoped_name_list .\nscoped_name_list  ->  scoped_name_list . ',' scoped_name",
"attr_dcl  ->  attr_dcl ',' simple_declarator .",
"attr_dcl  ->  opt_readonly ATTRIBUTE param_type_spec . simple_declarator",
"op_dcl  ->  opt_op_attr op_type_spec IDENT . parameter_dcls opt_raises_expr opt_context_expr",
"init_dcl  ->  FACTORY IDENT . '(' opt_init_param_dcl_list ')' ';'",
"state_member  ->  private_public type_spec . declarators ';'",
"primary_expr  ->  '(' const_expr ')' .",
"or_expr  ->  or_expr '|' xor_expr .\nxor_expr  ->  xor_expr . '^' and_expr",
"xor_expr  ->  xor_expr '^' and_expr .\nand_expr  ->  and_expr . '&' shift_expr",
"and_expr  ->  and_expr '&' shift_expr .\nshift_expr  ->  shift_expr . LSHIFT add_expr\nshift_expr  ->  shift_expr . RSHIFT add_expr",
"shift_expr  ->  shift_expr LSHIFT add_expr .\nadd_expr  ->  add_expr . '+' mult_expr\nadd_expr  ->  add_expr . '-' mult_expr",
"shift_expr  ->  shift_expr RSHIFT add_expr .\nadd_expr  ->  add_expr . '+' mult_expr\nadd_expr  ->  add_expr . '-' mult_expr",
"add_expr  ->  add_expr '+' mult_expr .\nmult_expr  ->  mult_expr . '*' unary_expr\nmult_expr  ->  mult_expr . '/' unary_expr\nmult_expr  ->  mult_expr . '%' unary_expr",
"add_expr  ->  add_expr '-' mult_expr .\nmult_expr  ->  mult_expr . '*' unary_expr\nmult_expr  ->  mult_expr . '/' unary_expr\nmult_expr  ->  mult_expr . '%' unary_expr",
"mult_expr  ->  mult_expr '*' unary_expr .",
"mult_expr  ->  mult_expr '/' unary_expr .",
"mult_expr  ->  mult_expr '%' unary_expr .",
"enumerator_list  ->  enumerator_list ',' enumerator .",
"member  ->  type_spec declarators ';' .",
"fixed_pt_type  ->  FIXED '<' positive_const_int ',' positive_const_int . '>'",
"sequence_type  ->  SEQUENCE '<' simple_type_spec ',' positive_const_int . '>'",
"fixed_array_size  ->  '[' positive_const_int ']' .",
"union_type  ->  UNION IDENT SWITCH '(' switch_type_spec ')' . '{' switch_body '}'",
"value_abs_dcl  ->  ABSTRACT VALUETYPE IDENT opt_value_inheritance_spec '{' interface_body . '}'",
"scoped_name_list  ->  scoped_name_list ',' . scoped_name",
"attr_dcl  ->  opt_readonly ATTRIBUTE param_type_spec simple_declarator .",
"parameter_dcls  ->  '(' . param_dcl_list ')'\nparameter_dcls  ->  '(' . ')'",
"op_dcl  ->  opt_op_attr op_type_spec IDENT parameter_dcls . opt_raises_expr opt_context_expr",
"init_dcl  ->  FACTORY IDENT '(' . opt_init_param_dcl_list ')' ';'",
"state_member  ->  private_public type_spec declarators . ';'\ndeclarators  ->  declarators . ',' declarator",
"fixed_pt_type  ->  FIXED '<' positive_const_int ',' positive_const_int '>' .",
"sequence_type  ->  SEQUENCE '<' simple_type_spec ',' positive_const_int '>' .",
"union_type  ->  UNION IDENT SWITCH '(' switch_type_spec ')' '{' . switch_body '}'",
"value_abs_dcl  ->  ABSTRACT VALUETYPE IDENT opt_value_inheritance_spec '{' interface_body '}' .",
"scoped_name  ->  scoped_name . SCOPE IDENT\nscoped_name_list  ->  scoped_name_list ',' scoped_name .",
"param_attribute  ->  IN .",
"param_attribute  ->  OUT .",
"param_attribute  ->  INOUT .",
"parameter_dcls  ->  '(' ')' .",
"parameter_dcls  ->  '(' param_dcl_list . ')'\nparam_dcl_list  ->  param_dcl_list . ',' param_dcl",
"param_dcl_list  ->  param_dcl .",
"param_dcl  ->  param_attribute . param_type_spec simple_declarator",
"opt_raises_expr  ->  RAISES . '(' scoped_name_list ')'",
"op_dcl  ->  opt_op_attr op_type_spec IDENT parameter_dcls opt_raises_expr . opt_context_expr",
"init_param_dcl  ->  IN . param_type_spec simple_declarator",
"init_dcl  ->  FACTORY IDENT '(' opt_init_param_dcl_list . ')' ';'",
"opt_init_param_dcl_list  ->  init_param_dcl_list .\ninit_param_dcl_list  ->  init_param_dcl_list . ',' init_param_dcl",
"init_param_dcl_list  ->  init_param_dcl .",
"state_member  ->  private_public type_spec declarators ';' .",
"case_label  ->  CASE . const_expr ':'",
"case_label  ->  DEFAULT . ':'",
"union_type  ->  UNION IDENT SWITCH '(' switch_type_spec ')' '{' switch_body . '}'\nswitch_body  ->  switch_body . case",
"switch_body  ->  case .",
"case  ->  case_label_list . element_spec ';'\ncase_label_list  ->  case_label_list . case_label",
"case_label_list  ->  case_label .",
"param_dcl_list  ->  param_dcl_list ',' . param_dcl",
"parameter_dcls  ->  '(' param_dcl_list ')' .",
"param_dcl  ->  param_attribute param_type_spec . simple_declarator",
"opt_raises_expr  ->  RAISES '(' . scoped_name_list ')'",
"opt_context_expr  ->  CONTEXT . '(' string_literal_list ')'",
"op_dcl  ->  opt_op_attr op_type_spec IDENT parameter_dcls opt_raises_expr opt_context_expr .",
"init_param_dcl  ->  IN param_type_spec . simple_declarator",
"init_dcl  ->  FACTORY IDENT '(' opt_init_param_dcl_list ')' . ';'",
"init_param_dcl_list  ->  init_param_dcl_list ',' . init_param_dcl",
"case_label  ->  CASE const_expr . ':'",
"case_label  ->  DEFAULT ':' .",
"union_type  ->  UNION IDENT SWITCH '(' switch_type_spec ')' '{' switch_body '}' .",
"switch_body  ->  switch_body case .",
"element_spec  ->  type_spec . declarator",
"case_label_list  ->  case_label_list case_label .",
"case  ->  case_label_list element_spec . ';'",
"param_dcl_list  ->  param_dcl_list ',' param_dcl .",
"param_dcl  ->  param_attribute param_type_spec simple_declarator .",
"scoped_name_list  ->  scoped_name_list . ',' scoped_name\nopt_raises_expr  ->  RAISES '(' scoped_name_list . ')'",
"opt_context_expr  ->  CONTEXT '(' . string_literal_list ')'",
"init_param_dcl  ->  IN param_type_spec simple_declarator .",
"init_dcl  ->  FACTORY IDENT '(' opt_init_param_dcl_list ')' ';' .",
"init_param_dcl_list  ->  init_param_dcl_list ',' init_param_dcl .",
"case_label  ->  CASE const_expr ':' .",
"element_spec  ->  type_spec declarator .",
"case  ->  case_label_list element_spec ';' .",
"opt_raises_expr  ->  RAISES '(' scoped_name_list ')' .",
"string_literal  ->  string_literal . STRING_L\nstring_literal_list  ->  string_literal .",
"opt_context_expr  ->  CONTEXT '(' string_literal_list . ')'\nstring_literal_list  ->  string_literal_list . ',' string_literal",
"string_literal_list  ->  string_literal_list ',' . string_literal",
"opt_context_expr  ->  CONTEXT '(' string_literal_list ')' .",
"string_literal  ->  string_literal . STRING_L\nstring_literal_list  ->  string_literal_list ',' string_literal .",
"",
"",
"",
0};
