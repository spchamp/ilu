
<!-- BeginILUCopyright

 Copyright (c) 1991-1999 Xerox Corporation.  All Rights Reserved.

 Unlimited use, reproduction, modification, and distribution of this
 software and modified versions thereof is permitted.  Permission is
 granted to make derivative works from this software or a modified
 version thereof.  Any copy of this software, a modified version
 thereof, or a derivative work must include both the above copyright
 notice of Xerox Corporation and this paragraph.  Any distribution of
 this software, a modified version thereof, or a derivative work must
 comply with all applicable United States export control laws.  This
 software is made available AS IS, and XEROX CORPORATION DISCLAIMS ALL
 WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
 LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
 EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
 NEGLIGENCE) OR STRICT LIABILITY, EVEN IF XEROX CORPORATION IS ADVISED
 OF THE POSSIBILITY OF SUCH DAMAGES.
  
 EndILUCopyright
-->
<!-- HTTP-NG type system DTD  
     A strawman encoding of the type system described in the Aug 1
     HTTP-ng Archictectural Model document WD-HTTP-NG-architecture-19980801.
     It does not cover all current ilu types.   The basic encoding
     principles used for encoding definitions are:

     - XML element attributes are used to express functional associations, 
       for example, <fixed  min-num = 0 .../>
     - XML element content is used for 1-n relationships
       for example, <array> <dim size = 4> <dim size = 5> </array> 
     - If a definition requires several kinds of 1-n associations 
       e.g. objects with both supertypes and methods, the content 
       is divided into two levels, with the first level expressing the
       relationship between the parent definition and the individual
       the content of the group, for example
       <object >  
         <supertypes> <supertype..> <supertypes> ... </supertype>
         <methods>    <method ..>   <method>     ..  </methods>   </object >  
 -->


        <!ELEMENT interface (type)+>
        <!ATTLIST interface id  ID #REQUIRED>

         <!--==========================================================-->

         <!ELEMENT type ( eqtype | boolean | enumeration |
                          fixed  | float | string |
                          array | sequence | record | union | object ) >   

         <!--  The 'id' is that used internally to the interface
               declaration.   The full-id field is a globally
               unique identifier that may be explicitly supplied or
               generated by the interface definition processor -->
         <!ATTLIST type id        ID       #REQUIRED 
                        full-id   ID       #IMPLIED
                        docstring CDATA    #IMPLIED  >


         <!--==========================================================-->

          <!ELEMENT eqtype EMPTY >
          <!ATTLIST eqtype type IDREF #REQUIRED> 

         <!--==========================================================-->

         <!ELEMENT boolean EMPTY >

         <!--==========================================================-->
         
         <!ELEMENT enumeration EMPTY>
         <!ATTLIST enumeration 
                   values NMTOKENS #REQUIRED> 

         <!--==========================================================-->

         <!ELEMENT fixed EMPTY >

         <!-- Fixed attribute values must be integer, and denoms positive -->
         <!ATTLIST fixed min-num  NMTOKEN #REQUIRED   
                         max-num  NMTOKEN #REQUIRED   
                         denom    NMTOKEN #REQUIRED 
                         denom-reciprocal  (T | F) 'F'  > 
          <!-- One of potentially many abbreviated forms for fixed
               allows, e.g., <type id = myint> &fixed; </type> 
               Note that XML DOCTYPE structure allows user-specified  
               additions of entity(macro) definitions               -->
         <!ENTITY  short-int
                   "<fixed min-num = '0' max-num = '65535'  denom = '1'/>" >


         <!--==========================================================-->

         <!ELEMENT float EMPTY> 

         <!-- size and base must be integer, min/max integer --> 
         <!ATTLIST float sig-size    NMTOKEN #REQUIRED
                         exp-base    NMTOKEN '2'      
                         min-exp     NMTOKEN #REQUIRED           
                         max-exp     NMTOKEN #REQUIRED
                         has-nan      ( T | F ) 'T' 
                         has-infinity ( T | F ) 'T'
                         has-signed-0 ( T | F ) 'T'
                         denormal-ok  ( T | F ) 'T'  >

         <!-- Example of predefined fixed subtypes. if defaults for 
              float change, following must be extended              --> 
         <!ENTITY ieee32 
            "<float  sig-size = '24' min-exp = '126'  max-exp  = '127'>">
         <!ENTITY ieee64 
            "<float  sig-size = '53' min-exp = '1022'  max-exp  = '1023'>">
          
            
        <!--==========================================================-->
        <!-- Note: string type under discussion                       -->
        <!ELEMENT string EMPTY>  
        <!-- Note: these are under discussion -->
        <!ATTLIST string max-len  NMTOKEN 'Ox7FFFFFFE' 	
                         language NMTOKEN "i-default"> 


        <!--==========================================================-->
        <!ELEMENT sequence EMPTY> 
        <!ATTLIST sequence
                  type           IDREF     #REQUIRED         
                  max-count      NMTOKEN   #IMPLIED > 


         <!--==========================================================-->
         <!ELEMENT array (dim)+> 
         <!ATTLIST array component-type IDREF #REQUIRED>

         <!ELEMENT dim EMPTY>  
         <!-- dim-size must be positive integer -->
         <!ATTLIST dim dim-size NMTOKEN  #REQUIRED>

         
         <!--==========================================================-->
         <!ELEMENT record (field)+ > 
         <!ELEMENT field EMPTY> 
         <!-- names must be unique within records -->
         <!ATTLIST field  
                   name NMTOKEN #REQUIRED
                   type IDREF   #REQUIRED > 
           

         <!--==========================================================-->
          <!ELEMENT union (alt)+ >
          <!-- names must be unique within unions -->
          <!ELEMENT alt EMPTY> 
          <!ATTLIST alt  
                 name     NMTOKEN #REQUIRED
                 type     IDREF   #REQUIRED >


         <!--==========================================================-->
         <!ELEMENT pickle EMPTY>


         <!--==========================================================-->
         <!ELEMENT reference EMPTY> 
         <!ATTLIST reference
                   basetype  IDREF #REQUIRED 
                   optional  ( T | F) 'F'    
                   aliased   (T | F) 'F'> 


         <!--==========================================================-->
         <!ELEMENT object ( supertypes?, methods?, state?)  >         
         <!ATTLIST object
                   local  (T | F) 'T' 
                   sealed (T | F) 'F' >

         <!ELEMENT supertypes (supertype)+ > 
         <!ELEMENT supertype EMPTY>  
         <!ATTLIST supertype name IDREF #REQUIRED>       

         <!ELEMENT methods (method)+ > 
         <!-- Only synchronous methods have outputs and exceptions -->  
         <!ELEMENT method  (inputs?, results?, exceptions?) >
         <!ATTLIST method 
                   name   NMTOKEN  #REQUIRED      
                   synch  ( T | F) 'T'  > 
             
         <!ELEMENT inputs  (parm)+ > 
         <!ELEMENT results (parm)+ > 
         <!ELEMENT exceptions (parm)+ > 

         <!ELEMENT parm EMPTY>
         <!ATTLIST parm
                   name NMTOKEN #REQUIRED
                   type IDREF   #REQUIRED >  

         <!ELEMENT state (attribute)+ >  
         <!ELEMENT attribute EMPTY> 
