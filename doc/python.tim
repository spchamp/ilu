@c $Id: python.tim,v 1.64 1999/08/03 01:57:02 janssen Exp $
@setfilename ilu-python.info
@settitle Using ILU with Python
@ifset ilucopyright
BeginILUCopyright

Copyright (c) 1991-1999 Xerox Corporation.  All Rights Reserved.

Unlimited use, reproduction, modification, and distribution of this
software and modified versions thereof is permitted.  Permission is
granted to make derivative works from this software or a modified
version thereof.  Any copy of this software, a modified version
thereof, or a derivative work must include both the above copyright
notice of Xerox Corporation and this paragraph.  Any distribution of
this software, a modified version thereof, or a derivative work must
comply with all applicable United States export control laws.  This
software is made available AS IS, and XEROX CORPORATION DISCLAIMS ALL
WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
NEGLIGENCE) OR STRICT LIABILITY, EVEN IF XEROX CORPORATION IS ADVISED
OF THE POSSIBILITY OF SUCH DAMAGES.
  
EndILUCopyright
@end ifset
@ifclear largerdoc
@include ilu-macros.tim

@defcodeindex ft
@defcodeindex vt
@defcodeindex et
@defcodeindex mt
@defcodeindex tt
@defcodeindex dt

@syncodeindex dt ft
@syncodeindex vt ft
@syncodeindex et ft
@syncodeindex mt ft
@syncodeindex tt ft

@syncodeindex pg cp
@syncodeindex tp ft

@c Experiment with smaller amounts of whitespace between chapters
@c and sections.
@tex
\global\chapheadingskip = 15pt plus 4pt minus 2pt 
\global\secheadingskip = 12pt plus 3pt minus 2pt
\global\subsecheadingskip = 9pt plus 2pt minus 2pt
\global\parskip 6pt plus 1pt
@end tex

@titlepage
@title Using ILU with Python
@author Denis Severson @code{<severson@@parc.xerox.com>}
@author Bill Janssen @code{<janssen@@parc.xerox.com>}
@sp
@today{}
@sp
Copyright @copyright{} 1994 Xerox Corporation@*
All Rights Reserved.
@end titlepage
@ifinfo
@node Top, ,(dir),(dir)
@top Using ILU with Python
@end ifinfo
@end ifclear

@section Introduction
@cindex ILU and Python
This document is for the @language{Python} programmer who wishes to use 
@system{ILU}. The following sections will show how @language{ILU} is
mapped into @language{Python} constructs and how both @language{Python}
clients and servers are generated and built.

@section The ISL Mapping to Python

@subsection Names
@cindex Mapping ISL names to Python symbols
In general, @system{ILU} constructs @language{Python} symbols from
@language{ISL} names by replacing hyphens with underscores.
For example, an @language{ISL} object type @isl{T-1} would correspond to
the @language{Python} class @C{T_1}.
Any place an @language{ISL} name appears as part or all of a @language{Python}
identifier, this translation occurs.

@subsection Interface
Each @language{ISL} @kwd{interface} @isl{@metavar{I}}
generates two @language{Python} modules:
one named @Python{@metavar{I}} containing common definitions,
and another named @Python{@metavar{I}__skel} containing skeletons (server stubs).
For example,
@isl{INTERFACE map-test;} generates the @language{Python} modules
@Python{map_test} and @Python{map_test__skel}, contained in the files
@file{map_test.py} and @file{map_test__skel.py}, respectively.

@subsection Basic Types
The basic @language{ISL} types have the following mapping to @language{Python}
types:

@enumerate
@item
BYTE,
BOOLEAN,
SHORT CHARACTER,
CHARACTER,
SHORT INTEGER,
INTEGER,
and SHORT CARDINAL
all map to @language{Python} int.
@item
LONG INTEGER,
CARDINAL,
and LONG CARDINAL
all map to @language{Python} long int.
@item
SHORT REAL
and REAL
map to @language{Python} float.
@item
LONG REAL
maps to the @language{Python} type ilu_longreal, a type implemented by the
@system{ILU} @language{Python} runtime.
This type has limited functionality, but can be passed around without loss of
precision, converted to float or int, and compared.
A value of this type may be constructed by calling @Python{ilu.LongReal()}.
@end enumerate

@subsubsection Constant
@language{ISL} constants translate to
@language{Python} variables initialized to the specified value.
For example,
@codeexample
CONSTANT pi : real = 3.14159265358979323846;
@end codeexample
maps to
@codeexample
pi = 3.14159265358979323846e0
@end codeexample

@subsection Strings
An @language{ISL} @isl{SEQUENCE OF SHORT CHARACTER} maps into a @language{Python}
string.  @isl{SEQUENCE OF BYTE} is also mapped into a @language{Python} string.

@subsection Pickles and Typecodes
A value corresponding to the @language{ISL} type @isl{PICKLE} is an instance
of the @language{Python} class @Python{ilu.Pickle}.  Instances of
this class have the following methods:

@itemize @bullet
@item @Python{typecode()} - returns the typecode of the pickle's value as a string.
@item @Python{value()} - returns the @language{Python} form of the value in the pickle.
@item @Python{bytes()} - the pickled bytes of the pickled value as a string.
@end itemize

@noindent
The constructor for this class takes two arguments, @metavar{typecode} and @metavar{value},
and returns
a new pickle containing the value specified by @metavar{value} of the @language{ISL} type
specified by @metavar{typecode}.  Pickles may also be created by calling the constructor
with a single argument string, which must be the result of an earlier call on the @Python{bytes()}
method of another pickle instance.

Typecodes are represented by the @language{Python} class @Python{ilu.Typecode}.  Typecodes are constructed
with a single string argument, 
of the form @Python{'@metavar{interface}.@metavar{type}'}, where
@metavar{interface} is the @language{ISL} name for the interface, and @metavar{type} is the
@language{ISL} name for the type.  Instances of the @Python{Typecode} class support the method

@itemize @bullet
@item @Python{id()} - return the ILU type ID (CORBA repository ID) for the typecode's type.
@item @Python{name()} - return the @language{ISL} name of the typecode's type.
@end itemize

Note that typecodes for the built-in @system{ILU} types (@type{boolean}, @type{cardinal}, etc.) are available through
this mechanism as well as typecodes for constructed types.  For example, the @language{Python} call
@code{ilu.Typecode("ilu.cardinal")} will return the typecode for the @system{ILU} @type{cardinal}
type.

@subsection Constructed Types

@subsubsection Enumeration
Enumerations are mapped to a method-less class object which
contains an attribute of the correct type and value for each
value in the enumeration.
The class also contains a dictionary, called ``__image__'', for each enumeration type
that maps an enumeration value to a
string corresponding to its @language{Python} enumeration value name.

For example,
@codeexample
TYPE color = ENUMERATION red, dark-blue END;
@end codeexample
maps to
@codeexample
class color:
    red = 0;
    dark_blue = 1;
    __image__ = @{
       red: 'red',
       dark_blue: 'dark_blue'@};
@end codeexample

@subsubsection Array
An @language{ISL} array maps into a @language{Python} list with the
specified number of elements.
Tuples as well as lists are accepted as input, but lists are always
produced as output from @system{ILU}.
Arrays of BYTE or SHORT CHARACTER are represented with Python strings.

@subsubsection Sequence
Sequences of BYTE or SHORT CHARACTER are represented as Python strings.

If your @system{ILU} system has been configured with
@switch{--enable-python-dictionaries}, sequence types matching a
particular profile will be mapped to Python dictionaries.  The sequence
type must have a name that ends with either "dict" or "Dict"; the base
type of the sequence type must be a record type; the record type must
have exactly two fields; the two fields must be named @code{name} and
@code{value}, in that order; and the type of the @code{name} field must be either an
integer, byte, string, or cardinal type.

All other @language{ISL} sequence types map into @language{Python} lists.
Tuples as well as lists are accepted as input, but lists are always
produced as output from @system{ILU}.

@subsubsection Record
@language{ISL} records map into generated @language{Python} classes with
the same name, with the record's field names as attributes.  The name
of the record becomes a constructor function which accepts exactly the
same number of arguments as the record has fields, in the same order.

For example, a record value of the @language{ISL} type
@codeexample
TYPE segment = RECORD left-limit : integer, right-limit : integer END;
@end codeexample
with a left-limit of -3 and a right-limit of 7 would map to
@codeexample
segment(-3, 7) => <segment:@{'left-limit' : -3, 'right-limit' : 7@}>
@end codeexample

@subsubsection Union
An @language{ISL} union maps into a @language{Python} tuple with two
components:
an integer discriminator, and the discriminated value.
There are three possibilities:
@enumerate
@item
If the discriminator matches one of the union case values of an arm,
the second component is of the type specified by that arm.
@item
If the discriminator matches no union case values and there is a default arm,
the second component is of the type specified by the default arm.
@item
If the discriminator matches no union case values and there is no default arm
but the union has the @isl{OTHERS} attribute,
the second component is @Python{None}.
@end enumerate

@subsubsection Optional
A value corresponding to the @language{ISL} type @isl{OPTIONAL @metavar{T}}
may be @Python{None} (indicating the null case) in addition to the values of the
type @metavar{T}.

@subsection Object Types
Each @language{ISL} object type is mapped into a @language{Python} class.
These classes have the methods specified in the ISL, as well as
some built-ins.

@subsubsection Surrogate and True Object Types

All surrogate object types inherit from @Python{iluRt.IluObjSurr}, which in turn inherits
from @Python{iluRt.IluObject}.  True object types inherit from @Python{IluRt.IluObjTrue},
which also inherits from @Python{iluRt.IluObject}.  The method @Python{IluTrueP()}
will return a true value on true instances, and a false value on surrogate instances.
The string binding handle of an
object instance can be retrieved with the method @Python{IluSBH()}.  The object-id of
an instance can be retrieved with @Python{IluObjectID()}; it returns a tuple containing
a string server ID and a string instance-handle.  If support for the
@system{CORBA} @protocol{IIOP} is configured into your @system{ILU} build, the 
string IOR of an instance can be retrieved by calling the function @Python{ilu.IOROfObject()},
passing the instance as the argument.  The type name of the most specific type of an instance
can be retrieved with the method @Python{IluTypeName()}; the unique ID of that type can
be retrieve with the method @Python{IluTypeID()}.

Object types which inherit from the @language{ISL} type @isl{ilu.CORBA-Object} (which include
all object types defined with @language{OMG IDL}), will inherit from the @language{Python}
class @class{@Python{ilu.CORBA_Object}}, which is the same as the class
@class{@Python{CORBA.Object}}.

@subsubsection Methods, Parameters, and Exceptions

@language{ISL} methods of an object type map to @language{Python} methods
of the corresponding class.
@isl{IN} and @isl{INOUT} parameters appear in the @language{Python} method
signature in the same order as they do in @language{ISL}.

Let us define a @emph{result} value to be either
a return value (corresponding to a method's return type) or
an @isl{INOUT} or @isl{OUT} parameter.
Result values are returned by the @language{Python} method as a tuple,
with the return value (if present) appearing before any parameters.
If the method has only one result value, then it is simply returned
(i.e., a tuple of length one is @emph{not} constructed to hold this value).
If the method has no result values, then @Python{None} is returned.

An @language{ISL} exception translates to a @language{Python} variable
initialized with a string representing the exception.
These variables are used in @language{Python} @Python{raise} statements
in object implementation code, and in @Python{try ... except} statements
in client code.
For example, the declaration
@codeexample
EXCEPTION division-by-zero;
@end codeexample
in the interface @isl{map-test} maps to the following statement in
@file{map_test.py}:
@codeexample
division = 'map-test: division-by-zero'
@end codeexample

@isl{ASYNCHRONOUS} methods have no return values and raise no user-specified exceptions.
They may return before the completion of the true method.  @isl{FUNCTIONAL} methods
that have no parameters are cached so that a surrogate address space makes only
one call to the true address space to retrieve the return value.

@subsubsection Garbage Collection and COLLECTIBLE

All instances of @system{ILU} object types are covered by the normal @language{Python}
garbage collection; i.e., the application program must maintain a reference to the instance,
or it will be garbage collected.  With true instances of COLLECTIBLE object types, the
@system{ILU} kernel will maintain an additional reference to the instance as long as it
has registered clients using that instance.

@section Access to standard ILU features

@subsection Servers and Ports

Each object exported by an implementation must belong to a true server,
an instance of the @language{Python} type @Python{ilu_Server} which is
implemented by the @system{ILU} runtime.
An @Python{ilu_Server} can be created by calling the function
@Python{ilu.Server(serverID, port-info, objectTable, default?)}
which returns a value of type @Python{ilu_Server}.
If @metavar{serverID} is a string, it specifies the server ID;
if it is @Python{None}, one will be invented automatically.
The @metavar{port-info} is either @Python{None}, in which case no
@C{ilu_Port} will be created for the server, or a sequence of either
two or three values.  The first value is always a string naming the protocol
to use on the port, or may be @Python{None} to indicate the default protocol.
The second value is either a tuple of strings indicating the transport
elements to use, or @Python{None} to indicate the default transport stack.
The third value, if provided, is a boolean value; if 'true', indicates that the port should be
@dfn{private}, which means that it won't be advertised in the SBH of an object
exported through this server.
The @metavar{objectTable} argument is an object table for use with the
server.  The @metavar{default?} argument, a boolean value, says whether or not to 
make this server the default server.
Additional ports
can be added to a server with the @method{@Python{addPort()}} method,
if an application needs to make it available with via multiple protocols
or addresses.

See the description of @Python{ilu.Server} in the API reference for
details of the methods available on an @Python{ilu_Server} instance.

An older version of @Python{ilu.Server}, called @Python{ilu.CreateServer}
is still available.  See the API reference for details.

The default server is used for an exported object if a server is not
otherwise specified.
If an object is exported before any servers have been created,
one will be created automatically using default parameters and a message
to that effect will be written to stderr.

@subsubsection Object Tables

The @metavar{objectTable} argument to @Python{ilu.Server} and @Python{ilu.CreateServer}
allows specification of a callback
function for creating true instances on demand.  The callback function
should take one argument, a string, which is the instance handle of the
instance to be created, and return a true instance.

On the client side, surrogate instances may be created by calling
@Python{ilu.FindOrCreateSurrogate}.  The first call on this surrogate
instance which attempts to communicate with the server will cause the object
table to be invoked, and the true instance of the object to be created.

@subsubsection Server Relocation

It is sometimes useful to have a `dummy' server, that will redirect any requests
to it to a real server somewhere else.  This can be used for load balancing,
automatic start-up of services, redirecting name service, code migration, and other
various purposes.  @system{ILU} supports this via a mechanism called @dfn{server relocation},
which can be used in @language{Python} via the @C{@method{setRelocator}} method
on the @Python{@type{ilu_Server}} class.

@subsection Threading and Event Loops

To use threads, you must have configured both @system{ILU} and @system{Python} with thread
support when building them.  If you have done this, your @system{ILU/Python} runtime support
will be thread-capable.  To have @system{ILU} begin using threads, place a call to the
function @fn{ilu.ThreadedOperation()} in your @language{Python} program before any other
@system{ILU} calls are made.

@subsubsection Animating Servers
Running the @system{ILU} main loop
by calling @Python{ilu.RunMainLoop()}
brings the true servers to life.
This function does not return until @Python{ilu.ExitMainLoop()} is called.
If you are using @system{ILU} with @module{Tkinter}, you should
import @module{ilu_tk} before creating a loop handle, or calling @fn{RunMainLoop}.
@module{ilu_tk} sets things up so that both @system{Tk}
and @system{ILU} events are handled.

@subsubsection Using Alarms
In order to schedule a @language{Python} function to be called at a certain
time in the future when executing the @system{ILU} main loop,
an @Python{ilu_Alarm} may be used.
Objects of this type are created by calling @Python{ilu.CreateAlarm()}.
An @Python{ilu_Alarm} must be set to have any effect.

The alarm's method @Python{set(time, proc, args)} is used to set the alarm.
The @Python{int}, @Python{float}, or @Python{ilu_FineTime} @Python{time} argument
is the time at which the alarm will fire;
the @Python{proc} argument is the @language{Python} function that will be
called when the alarm fires;
and
the @Python{args} argument is a tuple of arguments to be passed to @Python{proc}.
The tuple @Python{args} must match @Python{proc}'s signature.
For example, if @Python{proc}
is declared @Python{def P(a, b):} then @Python{args} must be a two-tuple.
Likewise, if @Python{proc} takes only one argument then @Python{args} must be
a one-tuple,
or if no arguments then a zero-tuple.

The function @Python{ilu.FineTime_Now()} may be called to obtain @system{ILU}'s
idea of the current time.
A value @Python{sec} of type @Python{int} or @Python{float} in units of seconds
may be converted to type @Python{ilu_FineTime} by calling
@Python{ilu.FineTime(sec)}.
Values of type @Python{ilu_FineTime} may be compared, added, and subtracted.
These operations may be used to construct values representing any relative
time (subject to precision and range limitations), which is what is needed
by an alarm's @Python{set} method.

The alarm may be set multiple times with different arguments, in which
case the parameters of the most recent call to @Python{set} are in effect.
Thus, once an alarm fires, it may be reused by calling @Python{set} again.

An alarm may be unset by calling its method @Python{unset()}.

@subsection Custom Records

@system{ILU} generally supports a facility named
@dfn{custom records}.  This means that an application can declare that
the language-specific mapping of a particular record type
@metavar{ISL(A)} to @metavar{lang(A)} is to be overridden, and that
instead a specific type @metavar{X} will be used in this language to
represent values of @metavar{ISL(A)}.  In @language{Python}, this
is done by simply replacing the generated class definition with a different
class definition.

For example, suppose we had the ISL record type
@codeexample
INTERFACE Ifc;
  ...
TYPE Foo = RECORD color : RGB-tuple, position : XY-pair END;
@end codeexample
@noindent
The normal mapping of @isl{Ifc.Foo} to Python would be to a class called @Python{Foo}
with the following definition:
@codeexample
class Foo (iluRt.IluRecord):
    __ilu_type_name__ = 'Ifc.Foo'
    def __init__(self, _color, _position)
        self.color = _color;
        self.position = _position;

    def __getinitargs__(self):
      return (self.color, self.position)
@end codeexample
@noindent
To override this, define a new class in your application that has matching
signatures for @Python{__init__} and @Python{__getinitargs__}, and a matching
value for @Python{__ilu_type_name__}.  It must also inherit from @Python{IluRt.IluRecord}.
Then assign the class object for this new class to the symbol @Python{Foo} in the
@language{Python} module @Python{Ifc}.  So:
@codeexample
class MyFoo (iluRt.IluRecord):
    __ilu_type_name__ = 'Ifc.Foo'
    def __init__(self, _color, _position):
        self.color = _color
        self.position = _position
        self.some_other_attr = whatever_I_want
        call_some_other_code(self)

    def __getinitargs__(self):
        return self.color, self.position

    @i{...possible other methods...}

Ifc.Foo = MyFoo
@end codeexample

@subsection String Binding Handle Formation

To use object tables properly, it is usually necessary for a client program
to create a surrogate instance for which the true instance does not yet exist.
In @language{Python}, this is done by creating a string binding handle for
the object, then calling @Python{@fn{ilu.ObjectOfSBH()}} on that SBH.
String binding handles may be formed by calling the function @Python{@fn{ilu.FormSBH()}}.

@subsection Simple Binding
A true instance may be published with the simple binding service by calling its
method @Python{IluPublish()}.
A true instance may be unpublished by calling its method @Python{IluWithdraw()}.

A published @system{ILU} object may be obtained by calling
@Python{ilu.LookupObject(sid, ih, cl)},
where @Python{sid} is object's server's server ID, @Python{ih}
is the object's instance handle, and @Python{cl} is its class.

@subsection Principal Identities and Passports

An @system{ILU} passport (see @ref{Security}) is represented in
@language{Python} by an instance of the @class{@Python{ilu_Passport}}
object type.  Instances of this type can be obtained by calling
@fn{@Python{ilu.CreatePassport()}}.  Please see the documentation
of that function for more information on the abilities of this object type.

The passport of the caller may be obtained in the true method by calling
the @system{ILU} runtime routine @Python{ilu.CallerIdentity()}.
The `native' passport may be obtained by calling @fn{@Python{ilu.GetPassport()}}.
In the case of a local call, these two passports may be the same object.
Passports are thread-local; that is, an application may use a different passport
in each thread.

@section Building Python/ILU Applications

@subsection Stub Generation
To generate @language{Python} stubs from an @language{ISL} file,
use the program @program{python-stubber}.
Two files are generated from each @language{ISL}
@isl{INTERFACE @metavar{name}}:
@itemize @bullet
@item
@file{@metavar{name}.py} containing code for constants, exceptions,
and types defined in the interface,
and
@item
@file{@metavar{name}__skel.py} containing code for the skeletons
(server stubs) for object types defined in the interface.
@end itemize

Alternatively, for surrogate-side use the stubber can be run automatically
by a hook in the @module{ilu} module.  Calling @fn{@Python{ilu.AutoImport()}}
will establish the stubber as part of the normal @language{Python} @Python{import}
machinery, and will cause @file{.isl} and @file{.idl} files in directories on your @var{ILUPATH}
environment variable path to be automatically stubbed and loaded.

@subsubsection Command-line Options

The program @program{python-stubber} supports the following options:
@itemize @bullet
@item @command{-I @metavar{directory}} -- add @metavar{directory} to the list of directories to search for interface definition files.  Note that the @metavar{directory} must be separated from the @command{-I} with whitespace, unlike the convention for C compilers.
@item @command{-dir @metavar{directory}} -- put output files in @metavar{directory}.  Will attempt to create @metavar{directory} with @code{"mkdir @metavar{directory}"} if not already present.
@item @command{-quiet} -- run without normal output to stderr.
@item @command{-stub} -- generate the @file{@metavar{name}.py} file.
@item @command{-skel} -- generate the @file{@metavar{name}__skel.py} file.
@item @command{-removefirst} -- for generated files, remove file before generating a new version of the file.
@end itemize

If neither @command{-stub} nor @command{-skel} is specified, both files are produced.  However, if either is explicitly specified, only those specified will be produced.

@subsection Implementing an ILU module in Python
A @language{Python} module that implements @system{ILU} objects of types
defined in @isl{INTERFACE @metavar{I}}
also imports from @Python{@metavar{I}__skel}.
This gives access to the skeleton classes from which implementation classes
inherit.

@subsubsection Implementation Inheritance
An implementation of object type @metavar{T} from interface @metavar{I}
needs to inherit from the class @Python{@metavar{I}__skel.@metavar{T}}.
If there is inheritance in the @language{ISL}, and an implementation of a
subtype wants to inherit from an implementation of a supertype,
the skeleton class must be appear in the list of base types
before the implementation class.

For example, objects for the @language{ISL}
@codeexample
INTERFACE j;

TYPE c1 = OBJECT METHODS one() END;
TYPE c2 = OBJECT METHODS two() END;
TYPE c3 = OBJECT SUPERTYPES c1, c2 END METHODS three() END;
@end codeexample
could be implemented in @language{Python} by
@codeexample
import ilu, j, j__skel

class c1(j__skel.c1):
    def one(self):
        ...

class c2(j__skel.c2):
    def two(self):
        ...

class c3(j__skel.c3, c1, c2):
    def three(self):
        ...
@end codeexample
In this case @Python{c3}'s method @Python{one} is implemented by @Python{c1.one}
and 
@Python{c3}'s method @Python{two} is implemented by @Python{c2.two}.

@subsubsection Exporting Objects
An object can be exported in one of three ways:
@enumerate
@item
The object's string binding handle may be obtained by calling its
method @Python{IluSBH()} and communicating this somehow to a client,
who then turns the handle back into an object by calling
@Python{ilu.ObjectOfSBH(cl, sbh)}.
@item
The object may be published using the simple binding service
by calling its method @Python{IluPublish()}.
In order for this to be effective, the object must have a well-known
object ID, or the object ID must be communicated to clients, so clients can
know what to pass to @Python{ilu.LookupObject}.
The object ID is a function of the object's instance handle and
its server's server ID.
@item
The object may be returned by a method or passed back in a method's
@isl{INOUT} or @isl{OUT} parameter.
@end enumerate

An object's instance handle can be controlled by setting the
instance variable @Python{IluInstHandle} before the object is first exported.
If this instance variable is not set, and instance handle will be
invented automatically.

An object's server can be controlled by setting the instance or class variable
@Python{IluServer} to a value of type @Python{ilu_Server}.
The value of this variable at the time an object is first exported will be
used as the server for that object.
If such a variable is not set, the default server is used.

@subsection Using an ILU module in Python
The @system{ILU} runtime interface is in the @language{Python} module
@Python{ilu}.
@language{Python} definitions for @language{ISL}
@isl{INTERFACE @metavar{I}} are in the @language{Python} module
@Python{@metavar{I}}.
As with any other modules in @language{Python}, these modules are imported
using the @Python{import} statement.

A client program may create an @system{ILU} object in one of three ways:
@enumerate
@item
Knowing the string binding handle @Python{sbh} and class @Python{cl} of an
object,
call @Python{ilu.ObjectOfSBH(cl, sbh)} which returns an instance of that class.
For example, to obtain an instance of @language{ISL} type @isl{square} from
@isl{INTERFACE shapes}
whose string binding handle is @Python{sbh},
one would call @Python{ilu.ObjectOfSBH(shapes.square, sbh)}.
@item
Knowing the object ID @Python{(sid, ih)} and class @Python{cl} of an object that
has been published using the simple binding service,
call @Python{ilu.LookupObject(sid, ih, cl)} which returns an instance of that class
(or @Python{None} if the lookup fails).
@item
Receive an instance as a result value from a method call that returns an
object type or has an object type as an @isl{INOUT} or @isl{OUT} parameter.
@end enumerate

@subsection CORBA Support in Python

This release of @system{ILU} has several nods to an eventual @system{CORBA} mapping
for the @language{Python} language.  The @language{Python} @module{CORBA} module
contains support for the classes @class{@omgidl{CORBA::ORB}}
and @class{@omgidl{CORBA::Object}}, and the @fn{@omgidl{CORBA::ORB_init()}} function.
See the Python/ILU API Reference for more information on these.

@subsection Freezing a Python Application Containing ILU

@example
From: "Martin v. Loewis" <loewis@@informatik.hu-berlin.de>
Subject: Freezing ILU
Date: Fri, 13 Mar 1998 07:54:30 PST

I currently try to freeze a Python application that uses ILU. With ILU
building libilupython, this is already simple. It would be even
simpler if ILU installed a file Setup in the library directory with
the contents

  iluPr -L/usr/ilu-2.0a12/lib -lilupython -lilu

(Of course, it could contain comments :-) This tells makesetup that
the iluPr module is available by linking ilupython and python to the
freezed image. With this installation, I can freeze my application
with the command line

  PYTHONPATH=/usr/ilu-2.0a12/lib python -O freeze/freeze.py
        -o outdir -e /usr/ilu-2.0a12/lib myscript.py

Of course, /usr/ilu-2.0a12 has to be replaced with the actual
ILUHOME/lib in both cases. For the Setup file, needs to be done prior
to the installation.

Regards,
Martin
@end example

The file @file{@metavar{ILUHOME}/lib/Setup} exists in this distribution, so it should be possible
to `freeze' a Python image containing ILU with the commands

@transcript
% @userinput{python -O freeze/freeze.py -o outdir -e $@{ILUHOME@}/lib myscript.py}
@end transcript

assuming that @file{myscript.py} contains your Python program, and that @file{@metavar{ILUHOME}/lib}
is on your @var{PYTHONPATH} environment variable.

@subsection Python/ILU Environment Variables

A number of environment variables are consulted by the ILU Python support.
The environment variables @var{ILUPATH} and @var{ILUPATH_NO_ILUHOME} are significant to the Python stubber.  They collectively define a set of directories to be appended to the interface search path given on the relevant tool's command line.  If @var{ILUPATH} is not defined, @file{.} and @file{@metavar{ILUHOME}/interfaces} are appended.  If @var{ILUPATH} is defined, it should contain a colon-separated list of directories.  That list will then be used, with an appended --- unless @var{ILUPATH_NO_ILUHOME} is defined (with any value) --- by @file{@metavar{ILUHOME}/interfaces}.

The @language{Python} language runtime supports the standard @system{CORBA} method @omgidl{CORBA::ORB::list_initial_services()}.  If the environment variable @var{ILU_COS_NAMING_IOR} is set to the IOR of a CosNaming service, @system{ILU} will offer the @interface{NameService} service, using that IOR to access the service.

During execution, ILU can experience three kinds of internal error conditions:  assertion failures, memory allocation failures, and `check' failures (similar to an assertion failure).  What it does when any of these three are experienced can be set, in the @language{Python} runtime, by setting the environment variables @var{ILU_ASSERTION_FAILURE_ACTION}, @var{ILU_MEMORY_FAILURE_ACTION}, and @var{ILU_CHECK_FAILURE_ACTION} to an integer value, which is then used to set the respective ILU kernel failure mode.  See @file{@metavar{ILUSRC}/runtime/kernel/iluxport.h} for the documentation of which integer codes are appropriate for @fn{ilu_SetAssertionFailureAction()}, @fn{ilu_SetMemFailureAction()}, and @fn{ilu_SetCheckFailureAction()}.

Also during execution, the @language{Python} import mechanism is augmented by default with an additional module loader which will load support for @language{ILU ISL} or @language{OMG IDL} interfaces found on the @var{ILUPATH} environment variable directly into @language{Python}.  Automatic enabling of this mechanism can be defeated by setting the environment variable @var{ILU_PYTHON_DISABLE_AUTOIMPORT} to any value before loading the @system{ILU} module into @language{Python}.  In addition, setting the variable @var{ILU_PYTHON_IMPORT_VERBOSE} will cause the auto-import mechanism to print status messages when loading an interface.

@section Python/ILU API Reference

@subsection Identifiers Exported From Module @Python{ilu}

@deffn Function AutoImport ([@metavar{path}=() [@metavar{verbose}=0]])
@ftindex AutoImport (Python LSR fn)

If called, enables the auto-loading of @file{.isl} and, if @language{OMG IDL} support is
configured into @system{ILU}, @file{.idl}, files that are on the user's @var{ILUPATH}
environment variable.  The @program{python-stubber} program is run to generate the
@language{Python} surrogate stubs for the interface description into a temporary directory, and those stubs are
loaded into the current program.  The stubber is re-run every time the interface is imported.
If an error occurs while producing the @language{Python} stubs, an exception is raised
and the import process stops.  The @metavar{path} parameter has no effect; the
@metavar{verbose} parameter will cause various messages to be written to the
standard output during the process of importing, if set to a non-false value.
@end deffn

@deffn Function CallerIdentity ()
@ftindex CallerIdentity (Python LSR fn)

Returns the passport containing identities of the caller.  This routine is only valid inside the code of a true method.
@end deffn

@defvr Constant CORBAMapping
@vtindex CORBAMapping (Python LSR const)

A value which evaluates to @language{Python} boolean True if the @system{CORBA} mapping for @language{Python} has been selected, and False if the `classic' ILU mapping has been selected.
@end defvr

@deffn Function CreateAlarm ()
@ftindex CreateAlarm (Python LSR fn)

Creates an object of type @Python{ilu_Alarm}.
@end deffn

@deffn Function CreateLoopHandle ()
@ftindex CreateLoopHandle (Python LSR fn)

Creates and returns an instance of a ``loop handle'' object, which can
be passed to @Python{ilu.RunMainLoop} and @Python{ilu.ExitMainLoop()}.
@end deffn

@deffn Function CreatePassport ()
@ftindex CreatePassport (Python LSR fn)
@ttindex ilu_Passport (Python LSR class)

Creates and returns an empty instance of a @class{@Python{ilu_Passport}} object.
The @class{@Python{ilu_Passport}} object is used to provide a sense of identity
in the @system{ILU} system.  It can hold any number of different identities,
each of which is represented with an appropriate data structure that varies
from identity type to identity type.

The @class{@Python{ilu_Passport}} object type has the following methods:
@itemize @bullet
@item @method{@Python{lookupIdentity (@metavar{IDENTITY-TYPE-NAME})}} - returns
the data structure for the specified identity, if the passport contains one;
Returns @Python{None} otherwise.  Raises @Python{ilu.IluGeneralError} if the
named identity type does not exist.  The identity type @constant{@Python{'ConnectionIdentity'}}
is always supported; the identity type @constant{@Python{'SunRPCAuthUnixIdentity'}}
will be supported if support for the @protocol{sunrpc} protocol has been configured
into @system{ILU}.
@item @method{@Python{addSunRPCAuthUnix (@metavar{HOSTNAME}, @metavar{UID}, @metavar{GID}, @metavar{TUPLE-OF-GROUPS})}} -
adds an identity of type @constant{@Python{'SunRPCAuthUnixIdentity'}} to the passport
with the specified @metavar{HOSTNAME}, @metavar{UID}, @metavar{GID}, and @metavar{TUPLE-OF-GROUPS}.
See Appendix A of RFC 1831 at @url{http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1831.txt} for details on the meaning of these parameters.  This method will only be available if support for
the @protocol{sunrpc} protocol has been configured into @system{ILU}.
@end itemize
@end deffn

@deffn Function CreatePipeline ()
@ftindex CreatePipeline (Python LSR fn)
@ttindex ilu_Pipeline (Python LSR class)

Creates and returns an empty instance of a @class{@Python{ilu_Pipeline}} object.
The @class{@Python{ilu_Pipeline}} object is used to allow
multiple requests to be outstanding on non-concurrent protocol streams.
The @class{@Python{ilu_Pipeline}} object has no methods.
@end deffn

@deffn Function CreateServer ( [serverID [transport [protocol [objtable]]]] )
@ftindex CreateServer (Python LSR fn)
@ttindex ilu_Server (Python LSR class)

This function is obsolete; you should use @Python{ilu.Server} instead.

Used to create an @Python{ilu_Server} object with the specified
serverID, transport, and protocol.
If @metavar{serverID} is unspecified or @Python{None}, an identifier will be invented automatically.
If transport or protocol are unspecified or @Python{None}, they will default to
@Python{('sunrpcrm', 'tcp_0_0')} and @Python{'sunrpc'}, respectively.  (Other combinations that
would work are transport of @Python{('tcp_0_0')} and protocol of @Python{'iiop_1_0_1'},
transport of @Python{('sunrpcrm', 'tcp_0_0')} and protocol of @Python{'courier'}, and
transport of @Python{('tcp_0_0')} and protocol of @Python{'http'},
depending on the configuration of your @system{ILU} system.)
The first time @Python{@fn{CreateServer}} is called, the server so created becomes
the default server.
If there is no default server when one is required, one will be created
using default parameters and a message will be issued on stderr.
The @metavar{objtable} argument allows specification of a callback
function for creating true instances on demand.  The callback function
should take one argument, a string, which is the instance handle of the
instance to be created, and return a true instance.

See the description of @Python{ilu.Server} for a description of the methods
available on the @Python{ilu_Server} object.

@end deffn

@deffn Function DefaultServer ()
@ftindex DefaultServer (Python LSR fn)

Returns the default server.
@end deffn

@defvr Constant DictionaryPassing
@vtindex DictionaryPassing (Python LSR const)

A value which evaluates to @language{Python} boolean True if the configuration option @switch{--enable-python-dictionaries} has been selected, and False otherwise.  That is, this is True if certain sequence types are mapped to Python dictionaries.
@end defvr

@deffn Function DoSoon (@metavar{FUNCTION}, @metavar{ARGS-TUPLE}, @metavar{STRING-DESCRIPTION})
@ftindex DoSoon (Python LSR fn)

Causes the function @metavar{FUNCTION} to be run with args @metavar{ARGS-TUPLE}
to be run at some point in the future, when the system finds it to be convenient.
In the threaded world, a new thread is forked to run the function; in the non-threaded
world, the function is executed at some point by the event loop as a background
task.
@end deffn

@deffn Function ExitMainLoop (loophandle)
@ftindex ExitMainLoop (Python LSR fn)

Exits the @system{ILU} main loop, assuming it is running.  The @metavar{loophandle}
is created by a call to @Python{ilu.CreateLoopHandle()}, and must have been
previously used as an argument to a call to @Python{ilu.RunMainLoop()}.
@end deffn

@defvr Constant FALSE
@vtindex FALSE (Python LSR const)

A value which evaluates to @language{Python} boolean False.
@end defvr

@deffn Function FindOrCreateSurrogate (server, instance_handle, class)
@ftindex FindOrCreateSurrogate (Python LSR fn)

Creates a new surrogate instance of class @metavar{class} with @Python{ilu.Server} @metavar{server},
and instance handle @metavar{instance_handle}.  This is often used in clients in conjunction
with an object table on the server.
@end deffn

@deffn Function FineTime (seconds)
@ftindex FineTime (Python LSR fn)

Converts its @Python{int} or @Python{float} argument @metavar{seconds} in units of seconds
to type @Python{ilu_FineTime}.
Objects of this type can be compared, added, subtracted, and converted to
@Python{int} or @Python{float}.
The main use of objects of this type is in setting alarms.
@end deffn

@deffn Function FormSBH (sid, ih, type, pinfo, tinfo_vec)
@ftindex FormSBH (Python LSR fn)

Forms a valid @system{ILU} string binding handle from the arguments and returns it.
The @metavar{sid} and @metavar{ih} arguments are strings containing the server ID and
instance handle for the desired instance.
The @metavar{type} argument should be the @language{Python} class for the most specific
object type of the desired object.  The @metavar{pinfo} argument is a tuple containing
the protocol information describing the object implementation's preferred communication
protocol.  The @metavar{tinfo_vec} argument is a tuple of tuples, specifying the transport
stack needed to connect to the implementation.  Each sub-tuple in the @metavar{tinfo_vec}
is a tuple describing a particular transport layer.

For instance, to create a string binding handle for an instance of type @isl{Foo.Bar},
with server id @Python{"some-server-id"} and instance handle @Python{"some-instance-handle"},
exported via @protocol{Sun RPC}, version 2, with program number 1000007, version 3, via @protocol{TCP/IP}
from host @code{"foobar.somewhere.com"}, port 3456, we'd say@*
@code{sbh = ilu.FormSBH('some-server-id', 'some-instance-handle', Foo.Bar,@*
('sunrpc_2', 1000007, 3), (('sunrpcrm',), ('tcp', 'foobar.somewhere.com', 3456)))}@*
Note the comma used after @Python{'sunrpcrm'} to create a true tuple; note also that use of this procedure requires some specialized knowledge, such as knowing that use of @protocol{Sun RPC} also requires use of the @protocol{Sun RPC} record-marking transport layer when used over @protocol{TCP/IP}.

@end deffn

@defvr Constant FineTimeRate
@vtindex FineTimeRate (Python LSR const)

The precision of type @Python{ilu_FineTime} in seconds is the reciprocal of
this constant.
@end defvr

@deffn Function FineTime_Now ()
@ftindex FineTime_Now (Python LSR fn)

Returns the current time as an @Python{ilu_FineTime} object.
@end deffn

@deffn Function FormSBH (objectID, contactInfo)
@ftindex FormSBH (Python LSR fn)

Returns the string binding handle corresponding to the
object id @metavar{objectID}
and contact info @metavar{contactInfo}.
This is the inverse of @fn{@Python{ParseSBH}}.
@end deffn

@deffn Function GetFDBudget ()
@ftindex GetFDBudget (Python LSR fn)

Returns the current setting of the file descriptor budget.
@end deffn

@deffn Function GetPassport ()
@ftindex GetPassport (Python LSR fn)

Returns the current passport for this thread.  See also @fn{@Python{CreatePassport()}} and @fn{@Python{SetPassport()}}.
@end deffn

@deffn Function GetPipeline ()
@ftindex GetPipeline (Python LSR fn)

Returns the current pipeline context for this thread.  See also @fn{@Python{CreatePipeline()}} and @fn{@Python{SetPipeline()}}.
@end deffn

@deffn Function GetSerializer ()
@ftindex GetSerializer (Python LSR fn)

Returns the current serialization context for this thread.  See also the @method{@Python{createSerializer()}} method on the @class{@Python{ilu_Server}} class, and the @fn{@Python{SetSerializer()}} function.
@end deffn

@defvr Exception IluGeneralError
@etindex IluGeneralError (Python LSR exc)

An exception that may be returned from the @system{ILU} runtime.
This exception is used to return all `standard' exceptions, with
a string value to indicate the specific type of standard
exception that occurred.
@end defvr

@defvr Exception IluProtocolError
@etindex IluProtocolError (Python LSR exc)

An exception that may be returned from the @system{ILU} runtime.
This exception is raised for all on-the-wire exceptions,
with a value that indicates which kind of protocol exception
occurred.
@end defvr

@defvr Exception IluUnimplementedMethodError
@etindex IluUnimplementedMethodError (Python LSR exc)

An exception that may be returned from the @system{ILU} runtime.
Raised when an unimplemented method is called, typically
on a true instance.
@end defvr

@defvr Exception IluUnknownTypeIDError
@etindex IluUnknownTypeIDError (Python LSR exc)

An exception that may be raised from the @system{ILU} runtime.
It indicates that the associated type ID value is unknown in
this address space.
@end defvr

@deffn Function IOROfObject (obj)
@ftindex IOROfObject (Python LSR fn)

If the @protocol{IIOP} protocol has been configured in, returns the string IOR
of the object, as specified in the CORBA 2 IIOP specification.  If
the @protocol{IIOP} protocol has not been configured in, throws an
error.
@end deffn

@deffn Function LongReal (v)
@ftindex LongReal (Python LSR fn)

Converts its @Python{int}, @Python{float}, or sixteen-integer @Python{list} or
@Python{tuple} argument to type @Python{ilu_LongReal}.
In case of a list or tuple, the elements encode the bytes of the
IEEE long real value, from most significant to least.
@end deffn

@deffn Function LookupObject (sid, ih, cl)
@ftindex LookupObject (Python LSR fn)

Returns the object with object server ID @metavar{sid}, object instance handle @metavar{ih},
and @language{Python} class @Python{cl},
assuming it was previously published using the simple binding service.
If the lookup fails, @Python{None} is returned.
@end deffn

@deffn Function ObjectOfSBH (cl, sbh)
@ftindex ObjectOfSBH (Python LSR fn)

Returns the object corresponding to the @language{Python} class @metavar{cl}
and string binding handle @metavar{sbh}.
@end deffn

@deffn Function ParseSBH (sbh)
@ftindex ParseSBH (Python LSR fn)

Returns the pair (object id, contact info) corresponding to the string
binding handle @metavar{sbh}.
@end deffn

@deffn Function RegisterCustomSurrogate (class)
@ftindex RegisterCustomSurrogate (Python LSR fn)

Registers @metavar{class} as the object type to create when receiving a surrogate of the
type indicated by the @Python{_IluClass} field of @metavar{class}.  @metavar{class} must
be a subtype of the default surrogate type for this @system{ILU} type.  This allows custom
surrogates, with implications for caching and other object-type-specific functions.
@end deffn

@deffn Function RegisterInputHandler (file, handler_fn)
@ftindex RegisterInputHandler (Python LSR fn)

Sets up an association between the @metavar{file} (which must be a file object
opened for reading), and the @metavar{handler_fn} (which must be a callable function
with no arguments) so that @metavar{handler_fn} is called whenever input is available
on @metavar{file}.  This is useful for implementing a server that also responds
to commands typed to its standard input, for example.  Passing a value of
@Python{None} for the @metavar{handler_fn} removes the association.  This
procedure should only be used in non-threaded applications.  In threaded applications,
you should fork a thread to handle this, instead.
@end deffn

@deffn Function RegisterOutputHandler (file, handler_fn)
@ftindex RegisterOutputHandler (Python LSR fn)

Sets up an association between the @metavar{file} (which must be a file
object opened for writing), and the @metavar{handler_fn} (which must be
a callable function with no arguments) so that @metavar{handler_fn} is
called whenever input is available on @metavar{file}.  Passing a value
of @Python{None} for the @metavar{handler_fn} removes the association.
@end deffn

@deffn Function RunMainLoop (loophandle)
@ftindex RunMainLoop (Python LSR fn)

Runs the @system{ILU} main loop.  The argument @metavar{loophandle} is a ``handle'' on that loop invocation,
created by a call to @Python{ilu.CreateLoopHandle()}.  This function can be used with either threaded
or non-threaded use of ILU/Python.  In the threaded use, it simply runs @Python{sleep.sleep} in the
calling thread.
@end deffn

@deffn Function Server ( serverID cinfo objtable useAsDefault? )
@ftindex Server (Python LSR fn)
@ttindex ilu_Server (Python LSR class)

Used to create an @Python{ilu_Server} object with the specified
serverID, transport, and protocol.
If @metavar{serverID} is unspecified or @Python{None}, an identifier will be invented automatically.
If @metavar{cinfo} is @Python{None}, only an @transport{inmem} port will be created for the server.
Otherwise, @metavar{cinfo} should be a tuple containing either two or three values, controlling the
characteristics of the port created for the server.  The first value
is the protocol to use.  If specified as @Python{None}, the default protocol will be used.
The second value is a tuple of strings specifying the transport stack.  If specified as @Python{None},
the default transport stack will be used.  The optional third value is a boolean; if True, it
specifies that the port created will be @dfn{private}, meaning that it will not be advertised
in the cinfo of objects exported through this server.  If omitted, it defaults to False.
The @metavar{objtable} argument allows specification of a callback
function for creating true instances on demand.  The callback function
should take one argument, a string, which is the instance handle of the
instance to be created, and return a true instance.
If @metavar{useAsDefault?} is True, the server will become the default server.

An @Python{ilu_Server} object has the following methods:
@itemize @bullet
@item @method{@Python{id ()}} - returns the string identifier of that server.
@item @method{@Python{addPort (@metavar{TRANSPORT}, @metavar{PROTOCOL} [, @metavar{PRIVATE?}])}} - adds
a port with the specified @metavar{TRANSPORT} and @metavar{PROTOCOL} (described above) to the
server instance.  If @metavar{PRIVATE?} is specified as True, the port created will be
private; otherwise, it will be public.
@item @method{@Python{createSerializer ()}} - creates and returns a new serialization
context object.
@cindex @class{@Python{ilu_Serializer}} (Python LSR class)
@item @method{@Python{setRelocator (@metavar{RELOCATOR-FUNCTION})}} - sets the relocation
procedure of the server to be @metavar{RELOCATOR-FUNCTION}.  @metavar{RELOCATOR-FUNCTION}
should be a function with no arguments, that returns either @Python{None}, or a tuple
with two elements.  If it returns the two-element tuple, the first element should be
a string specifying pinfo as in the arguments to @Python{CreateServer}, and the
second argument should be a tuple of tinfo, again as in the arguments to @Python{CreateServer}.
@item @method{@Python{nativeCInfo ([ PRIVATE? ])}} - returns a tuple containing the protocol
and transport info for the first port of the server.  If @metavar{PRIVATE?} is specified,
the first private port will be used; otherwise the first public port will be used.
If no cinfo is available for the server, @Python{None} will be returned.
@item @method{@Python{addCInfo (PINFO, TINFO)}} - adds the specified @metavar{PINFO} and
@metavar{TINFO} to the connection information for the port.  This can be used to
override the natural connection information for a server.
@end itemize
@end deffn

@deffn Function SetCalloutExceptionHandler (handler-fn)
@ftindex SetCalloutExceptionHandler (Python LSR fn)

This function can be used to define a function @metavar{handler-fn} which is called when an internal @system{Python}
exception is signalled in code called from the @system{ILU} @language{C} code.  The handler function receives
four arguments:  a string indicating where in the @system{ILU} runtime the exception was encountered, the exception
type, the exception value, and a traceback object.  This function is typically used to note the exception
to a file or stderr; see the example usage in @file{@metavar{ILUSRC}/runtime/python/iluRt.py}.  If a parameter
of @Python{None} is passed to @fn{SetCalloutExceptionHandler}, it cancels any handler function in use,
and a default built-in one is used.
@end deffn

@deffn Function SetDebugLevel (flags-or-switches)
@ftindex SetDebugLevel (Python LSR fn)

Sets the @system{ILU} kernel debugging flags according to its @Python{int}
argument, if an int is specified, or via the colon-separated list of
debug switches, if a string is specified.  See the Debugging section of the
ILU Manual for more information on these switches.
@end deffn

@deffn Function SetFDBudget (desiredbudget)
@ftindex SetFDBudget (Python LSR fn)

Attempts to set the file descriptor budget.  Returns what the new budget actually is (may be different than requested).
@end deffn

@deffn Function SetMainLoop (DoEvent, RegisterInput, CancelInput, RegisterOutput, CancelOutput, CreateAlarm, SetAlarm, CancelAlarm)
@ftindex SetMainLoop (Python LSR fn)

The purpose of this function is to be able to use a foreign main loop
(such as for a user interface toolkit)
with an @system{ILU} server.
The details will not be described here.
Look at the runtime module @module{@Python{ilu_tk}} for an example of its use.
This function should only be used with non-threaded use of ILU/Python.
@end deffn

@deffn Function SetPassport (passport)
@ftindex SetPassport (Python LSR fn)

Sets the current passport identity for this thread, and returns the passport active before this call.
Either of these can be @Python{None}.  Also see the function @fn{@Python{CreatePassport}},
and the function @fn{@Python{GetPassport}}.
@end deffn

@deffn Function SetPipeline (pipeline)
@ftindex SetPipeline (Python LSR fn)

Sets the current pipelining context for this thread, and returns the context active before this call.
Either of these can be @Python{None}.  Also see the function @fn{@Python{CreatePipeline}},
and the function @fn{@Python{GetPipeline}}.
@end deffn

@deffn Function SetSerializer (serializer)
@ftindex SetSerializer (Python LSR fn)

Sets the current serialization context for this thread, and returns the context active before this call.
Either of these can be @Python{None}.  Also see the @method{@Python{createSerializer}} method on
the class @class{@Python{ilu_Server}}, and the function @fn{@Python{GetSerializer}}.
@end deffn

@deffn Function TCPDefaultBufferSize (size)
@ftindex TCPStatistics (Python LSR fn)

Sets the default buffer sized used for TCP/IP transport buffers to @metavar{size}.
Returns the previous default buffer size.  Raises @exception{@Python{IluGeneralError}}
if support for the TCP/IP transport is not configured into @system{ILU}.
@end deffn

@deffn Function TCPStatistics (*reset)
@ftindex TCPStatistics (Python LSR fn)

Returns a dictionary containing the current TCP/IP statistics for this process.
If a True value is specified for the optional argument, the statistics counters are reset.
If TCP/IP support is not configured into @system{ILU}, this routine will
raise the exception @exception{@Python{IluGeneralError}}.
@end deffn

@deffn Function ThreadedOperation ()
@ftindex ThreadedOperation (Python LSR fn)

Enables thread use in both the @system{ILU} kernel and the @system{ILU/Python} runtime.  This routine should be called
before any other @system{ILU} calls are made.
@end deffn

@defvr Constant TRUE
@vtindex TRUE (Python LSR const)

A value which evaluates to @language{Python} boolean True.
@end defvr

@deffn Function TypeID (cl)
@ftindex TypeID (Python LSR fn)

Returns the @system{ILU} unique type identifier
corresponding to the @language{Python} class @metavar{cl}.
@end deffn

@deffn Function TypeName (cl)
@ftindex TypeName (Python LSR fn)

Returns the @system{ILU} type name
corresponding to the @language{Python} class @metavar{cl}.
@end deffn

@defvr Constant Version
@vtindex Version (Python LSR const)

The ILU version string.
@end defvr

@subsection Identifiers Exported from the @Python{CORBA} Module

@defvr {Variable} InitialReferences
@vtindex @Python{CORBA.InitialReferences} (Python LSR variable)
A dictionary with string keys, and values of type @class{@Python{CORBA.Object}}.
It is used to resolve strings passed as parameters to @method{@Python{CORBA.ORB.resolve_initial_references()}}.
The following names are supported automatically by @language{Python} runtime:
@itemize @bullet
@item @b{NameService}@*
If the environment variable @var{ILU_COS_NAMING_IOR} is bound to a string IOR
for a @language{OMG IDL} @omgidl{CosNaming::NamingContext} object instance,
the Python runtime will attempt to create a surrogate for that
instance locally, ping it, and if successful will bind it to the string @code{"NameService"}.
@end itemize
@end defvr

@defvr {Exception} InvalidName
@etindex @Python{CORBA.InvalidName} (Python LSR exc)
Raised when an invalid name is passed to @method{@Python{CORBA.ORB.resolve_initial_references()}}.
Has the associated bad name as its value.
@end defvr

@deftp {Class} {Object} (ilu.IluObjSurr)
@ttindex CORBA.Object (Python LSR class)
A type which all object types defined in @language{OMG IDL}, or inheriting
from @isl{ilu.CORBA-Object} in @language{ISL}, participate in.  It supports
the following methods:
@itemize @bullet
@item @Python{_is_a(@metavar{type_uid})} - returns @Python{True} if the object is
of the specified type, @Python{False} otherwise; raises @Python{ilu.IluUnknownTypeIDError}
if the @metavar{type_uid} is unknown in this address space;
@mtindex @Python{CORBA.Object._is_a} (Python LSR method)
@mtindex @Python{_is_a()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_is_nil()} - returns @Python{False}; raises @Python{TypeError} if called
via @fn{@Python{CORBA.Object._is_nil()}} on a non-Python-object type;
@mtindex @Python{CORBA.Object._is_nil} (Python LSR method)
@mtindex @Python{_is_nil()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_non_existent()} - returns the logical inverse of the result of calling
@Python{ilu.PingObject()} on the object;
@mtindex @Python{CORBA.Object._non_existent} (Python LSR method)
@mtindex @Python{_non_existent()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_is_equivalent(@metavar{other})} - returns the result of comparing
@metavar{self} and @metavar{other} with the @language{Python} @Python{==} operator;
@mtindex @Python{CORBA.Object._is_equivalent} (Python LSR method)
@mtindex @Python{_is_equivalent()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_duplicate()} - does nothing, returns @metavar{self};
@mtindex @Python{CORBA.Object._duplicate} (Python LSR method)
@mtindex @Python{_duplicate()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_release()} - does nothing, returns nothing;
@mtindex @Python{CORBA.Object._release} (Python LSR method)
@mtindex @Python{_release()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_hash(@metavar{max_value})} - returns @Python{(hash(@metavar{self}) % (@metavar{max_value} + 1))};
@mtindex @Python{CORBA.Object._hash} (Python LSR method)
@mtindex @Python{_hash()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_get_implementation()} - raises @exception{@Python{IluUnimplementedMethodError}};
@mtindex @Python{CORBA.Object._get_implementation} (Python LSR method)
@mtindex @Python{_get_implementation()} (Python LSR method on @Python{CORBA.Object})
@item @Python{_get_interface()} - raises @exception{@Python{IluUnimplementedMethodError}};
@mtindex @Python{CORBA.Object._get_interface} (Python LSR method)
@mtindex @Python{_get_interface()} (Python LSR method on @Python{CORBA.Object})
@end itemize
@noindent
The @class{@Python{CORBA.Object}} class is actually implemented in @class{@Python{iluRt.CORBA_Object}},
so all classes which inherit from @class{@Python{ilu.CORBA_Object}} will have access to these
methods.
@end deftp

@deftp {Class} {ORB}
@ttindex CORBA.ORB (Python LSR class)
The general class for manipulating the object request broker.  There is typically
only one instance of this class per address space.  It is retrieved with the
function @fn{@Python{CORBA.ORB_init()}}; it supports the following methods:
@itemize @bullet
@item @Python{object_to_string(@metavar{instance})} - returns
a string which can be used in a subsequent @method{@Python{string_to_object()}} call;
@mtindex @Python{CORBA.ORB.object_to_string} (Python LSR method)
@item @Python{string_to_object(@metavar{string})} - if the specified @metavar{string}
is well formed and specifies an object, the object is created locally and a reference is returned; the
reference may be to a true instance if the string names a true instance; if the string
is poorly formed, the @language{Python} exception @exception{@Python{ilu.IluGeneralError}}
is raised.  This method does not test for the existence of the instance.
@mtindex @Python{CORBA.ORB.string_to_object} (Python LSR method)
@item @Python{resolve_initial_references(@metavar{string})} - If the
@metavar{string} argument is bound in the dictionary @var{@Python{CORBA.InitialReferences}},
the value is returned.  Otherwise, the exception @exception{@Python{CORBA.InvalidName}} is raised.
See the documentation of @var{@Python{CORBA.InitialReferences}} for a listing of the
names that are bound automatically, if any.
@mtindex @Python{CORBA.ORB.resolve_initial_references} (Python LSR method)
@end itemize
@end deftp

@deffn Function ORB_init (@metavar{argv}=(), @metavar{orb_id}='ilu')
@ftindex CORBA.ORB_init (Python LSR function)
Returns an instance of @class{@Python{CORBA.ORB}} with the specified @metavar{orb_id} (currently
only the ORB ID @Python{'ilu'} is supported).  The arguments which may be passed
in via @metavar{argv} are ignored.
@end deffn

@subsection Methods and Attributes of @system{ILU} Objects

@itemize @bullet
@item
@Python{IluObjectID()} returns the object ID of the object.
@mtindex IluObjectID (Python inst meth)
@item
@Python{IluPublish()} publishes the object using the simple binding service.
@mtindex IluPublish (Python inst meth)
@item
@Python{IluSBH()} returns the object's string binding handle.
@mtindex IluSBH (Python inst meth)
@item
@Python{IluTypeID()} returns the unique type identifier of the
object's @system{ILU} type.
@mtindex IluTypeID (Python inst meth)
@item
@Python{IluTypeName()} returns the type name of the object's @system{ILU} type.
@mtindex IluTypeName (Python instance meth)
@item
@Python{IluWithdraw()} undoes the effect of IluPublish().
@mtindex IluWithdraw (Python inst meth)
@end itemize

Special attributes of @system{ILU} true objects:
One or more of the following attributes may be set in a
true (implementation) object of an @language{ISL} object type
to control certain aspects of that object.

@itemize @bullet
@item
@Python{IluInstHandle}, a string instance variable,
gives the object's instance handle.
If not present, an instance handle is invented automatically.
@vtindex IluInstHandle (Python inst var)
@item
@Python{IluServer}, a variable of type @Python{ilu_Server},
determines the object's server.
This can be an instance or a class variable.
If not present, the default server is used.
@vtindex IluServer (Python inst var)
@end itemize

@ifclear largerdoc
@section Index of Functions
@printindex ft
@end ifclear
